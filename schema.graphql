type Query {
  hello: String
  user: user

  admins: [admin]
  admin: admin

  students: [student]
  student: student

  parents: [parent]
  parent: parent

  drivers: [driver]
  driver: driver

  buses: [bus]
  bus: bus

  trips: [trip]
  trip: trip

  routes: [route]
  route: route

  schedules: [schedule]
  schedule: schedule

  events: [event]
  event: event

  complaints: [complaint]
  complaint: complaint

  locReports: [locReport]
  locReport: locReport

  classes: [class]
  class: class

  teachers: [teacher]
  teacher: teacher


  payment: payment
  payments: [payment]

  school: school
  schools: [school]

  charge: charge
  charges: [charge]

  grade: grade
  grades: [grade]

  subject: subject
  subjects: [subject]

  topic: topic
  topics: [topic]

  subtopic: subtopic
  subtopics: [subtopic]

  question: question
  questions: [question]

  answer: answer
  answers: [answer]

  option: option
  options: [option]

  term: term
  terms: [term]

  team: team
  teams: [team]

  team_member: team_member
  team_members: [team_member]

  invitation: invitation
  invitations: [invitation]
}

type Mutation {
  hello: String

  admins: adminMutations
  students: studentMutations
  parents: parentMutations
  drivers: driverMutations
  buses: busMutations
  trips: tripMutations
  routes: routeMutations
  schedules: scheduleMutations
  payments: paymentMutations
  events: eventMutations
  complaints: complaintMutations
  charges: chargeMutations
  locReports: locReportMutations
  classes: classMutations
  schools: schoolMutations
  teachers: teacherMutations
  sms: smsMutations
  grades: gradeMutations
  subjects: subjectMutations
  topics: topicMutations
  subtopics: subtopicMutations
  questions: questionMutations
  answers: answerMutations
  options: optionMutations
  terms: termMutations
  teams: teamMutations
  team_members: team_memberMutations
  invitations: invitationMutations
  responses: optionResponseMutations
}

# user things
type user {
  id: String
  name: String
  email: String
  phone: String
  address: String
}

# payment things
type payment {
  id: String
  school: String
  ammount: String
  type: String
  phone: String
  acc: String
  ref: String
  time: String
}

input mpesaStartTxInput {
  id: String
  phone: String
  ammount: String
}

type mpesaStartTxVerification {
  CheckoutRequestID: String
  MerchantRequestID: String
}

input mpesaStartTxVerificationInput {
  CheckoutRequestID: String
  MerchantRequestID: String,
  school:String
}

type mpesaStartTxResult {
  success: Boolean
  message: String
}

input Ipayment {
  school: String
  phone: String
  ammount: String
  type: String
  ref: String
  time: String
}

input Upayment {
  id: String!
  phone: String
  school: String
  ammount: String
  type: String
  ref: String
  time: String
}

type paymentMutations {
  init(payment: mpesaStartTxInput!): mpesaStartTxVerification
  confirm(payment: mpesaStartTxVerificationInput!): mpesaStartTxResult
  create(payment: Ipayment!): payment
  archive(payment: Upayment!): payment
  restore(payment: Upayment!): payment
}

# charges things
type charge {
  id: String
  school: String
  ammount: String
  reason: String
  time: String
}

input Icharge {
  school: String
  ammount: String
  reason: String
  time: String
}

input Ucharge {
  id: String!
  school: String
  ammount: String
  reason: String
  time: String
}

type chargeMutations {
  create(charge: Icharge!): charge
  update(charge: Ucharge!): charge
  archive(charge: Ucharge!): charge
  restore(charge: Ucharge!): charge
}

# admins things
type admin {
  id: String
  names: String
  email: String
  password: String
  
  phone: String
  schools: [school]
}

input Iadmin {
  names: String
  phone: String
  school: String!
  email: String!
  password: String!
}

input Uadmin {
  id: String!
  names: String
  phone: String
  email: String
  password: String
}

type adminMutations {
  create(admin: Iadmin!): admin
  invite(admin: Iinvite!): invitation
  update(admin: Uadmin!): admin
  archive(admin: Uadmin!): admin
  restore(admin: Uadmin!): admin
}

# driver things
type driver {
  id: String
  names: String
  username: String
  email: String
  phone: String
  license_expiry: String
  licence_number: String
  home: String
  experience: String
  bus: bus
}

input Idriver {
  names: String
  phone: String
  username: String
  email: String
  license_expiry: String
  licence_number: String
  home: String
  school: String!
  experience: String
  bus: String
}

input Udriver {
  id: String!
  names: String
  phone: String
  username: String
  email: String
  license_expiry: String
  licence_number: String
  home: String
  experience: String
  bus: String
}

type driverMutations {
  create(driver: Idriver!): driver
  update(driver: Udriver!): driver
  archive(driver: Udriver!): driver
  restore(driver: Udriver!): driver
  invite(driver: Iinvite!): invitation
  transfer(driver: Itransfer!): driver
}

# bus things
type bus {
  id: String
  make: String
  plate: String
  size: Float
  driver: driver
}

input Ibus {
  make: String
  plate: String
  size: Float
  school: String!
  driver: String
}

input Ubus {
  id: String!
  make: String
  plate: String
  size: Float
  driver: String
}

type busMutations {
  create(bus: Ibus!): bus
  update(bus: Ubus!): bus
  archive(bus: Ubus!): bus
  restore(bus: Ubus!): bus
}

enum eventType {
  CHECKEDOFF
  CHECKEDON
}

# event things
type event {
  id: String
  student: student
  time: String
  type: eventType
  trip: trip
  locReport: locReport
}

input Ievent {
  student: String
  time: String
  school: String!
  type: String
  trip: String
}

input Uevent {
  id: String!
  student: String
  time: String
  type: String
  trip: String
}

type eventMutations {
  create(event: Ievent!): event
  update(event: Uevent!): event
  archive(event: Uevent!): event
  restore(event: Uevent!): event
}

# complaints things
type complaint {
  id: String
  parent: parent
  content: String
  time: String
}

input Icomplaint {
  parent: String
  school: String!
  content: String
  time: String
}

input Ucomplaint {
  id: String!
  parent: String
  content: String
  time: String
}

type complaintMutations {
  create(complaint: Icomplaint!): complaint
  update(complaint: Ucomplaint!): complaint
  archive(complaint: Ucomplaint!): complaint
  restore(complaint: Ucomplaint!): complaint
}

# loc things
type loc {
  id: String
  lat: Float
  lng: Float
}

input Iloc {
  lat: Float
  lng: Float
}

input Uloc {
  id: String!
  lat: Float
  lng: Float
}

type locMutations {
  create(loc: Iloc!): loc
  update(loc: Uloc!): loc
  archive(loc: Uloc!): loc
  restore(loc: Uloc!): loc
}

# locReport things
type locReport {
  id: String
  time: String
  loc: loc
  trip: trip
  event: event
  student: student
}

input IlocReport {
  time: String
  loc: Iloc
  trip: String
  event: String
  student: String
}

input UlocReport {
  id: String!
  time: String
  loc: Iloc
  trip: String
  event: String
  student: String
}

type locReportMutations {
  create(locreport: IlocReport!): locReport
  update(locreport: UlocReport!): locReport
  archive(locreport: UlocReport!): locReport
  restore(locreport: UlocReport!): locReport
}

enum tripType {
  PICK
  DROP
}

# trip things
type trip {
  id: String
  startedAt: String
  completedAt: String
  isCancelled: Boolean
  bus: bus
  type: tripType
  driver: driver
  schedule: schedule
  events: [event]
  locReports: [locReport]
}

input Itrip {
  startedAt: String
  completedAt: String
  isCancelled: Boolean
  school: String!
  driver: String!
  schedule: String
}

input Utrip {
  id: String!
  startedAt: String
  completedAt: String
  isCancelled: Boolean
  schedule: String
}

type tripMutations {
  create(trip: Itrip!): trip
  update(trip: Utrip!): trip
  archive(trip: Utrip!): trip
  restore(trip: Utrip!): trip
}

enum gender {
  MALE
  FEMALE
}

# student things
type student {
  id: String
  names: String
  route: route
  gender: gender
  registration: String
  parent: parent
  parent2: parent
  class: class
  events: [event]
}

input Istudent {
  names: String
  route: String
  gender: gender
  registration: String
  parent: String
  school: String!
  parent2: String
  class: String
}

input Ustudent {
  id: String!
  names: String
  route: String
  registration: String
  gender: gender
  parent: String
  parent2: String
  class: String
}

type studentMutations {
  create(student: Istudent!): student
  update(student: Ustudent!): student
  archive(student: Ustudent!): student
  restore(student: Ustudent!): student
}

# route things
type route {
  id: String
  name: String
  description: String
  path: [loc]
  schedule: schedule
  students: [student]
}

input Iroute {
  name: String
  description: String
  school: String!
  students: [String]
  path: [Iloc]
}

input Uroute {
  id: String!
  name: String
  description: String
  students: [String]
  path: [Iloc]
}

type routeMutations {
  create(route: Iroute!): route
  update(route: Uroute!): route
  archive(route: Uroute!): route
  restore(route: Uroute!): route
}

# class things
type class {
  id: String
  name: String
  school: school
  teacher: teacher
  students: [student]
}

input IClass {
  name: String
  teacher: String
  school: String!
}

input UClass {
  id: String!
  name: String
  teacher: String
}

type classMutations {
  create(class: IClass!): class
  update(class: UClass!): class
  archive(class: UClass!): class
  restore(class: UClass!): class
}

type financial {
  balance: Float,
  balanceFormated: String
}

# school things
type school {
  id: String
  name: String
  phone: String
  email: String
  address: String
  error: String
  financial: financial
  inviteSmsText: String
  gradeOrder: [String]
  termOrder: [String]
  logo: String
  themeColor: String

  # relations for saas
  admins: [admin]
  students: [student]
  parents: [parent]
  drivers: [driver]
  buses: [bus]
  trips: [trip]
  routes: [route]
  schedules: [schedule]
  events: [event]
  complaints: [complaint]
  locReports: [locReport]
  classes: [class]
  teachers: [teacher]
  payments:[payment]
  charges:[charge]
  grades:[grade]
  terms:[term]
  teams:[team]
  invitations: [invitation]
}

input ISchool {
  name: String
  phone: String
  email: String
  address: String
  logo: String
  themeColor: String
  inviteSmsText: String,
  gradeOrder:[String]
  termOrder: [String]
}

input USchool {
  id: String!
  name: String
  phone: String
  email: String
  logo: String
  themeColor: String
  address: String
  inviteSmsText: String
  gradeOrder:[String]
  termOrder: [String]
}

type schoolMutations {
  create(school: ISchool!): school
  update(school: USchool!): school
  archive(school: USchool!): school
  restore(school: USchool!): school
  invite(school: USchool!): invitation
}

# schedule things
enum day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum scheduleType {
  PICK
  DROP
}

type smsActions {
  tick: String
  cancellation: String
}

input IsmsActions {
  tick: String
  cancellation: String
}

type action {
  sms: smsActions
}

input Iaction {
  sms: IsmsActions
}

type schedule {
  id: String
  name: String
  message: String
  time: String
  end_time: String
  days: [day]
  type: scheduleType
  route: route
  bus: bus
  trips: [trip]
  driver: driver
  actions: action
}

input Ischedule {
  name: String
  message: String!
  time: String
  end_time: String
  school: String!
  route: String
  type: scheduleType
  days: String
  bus: String
  driver: String
  actions: Iaction
}

input Uschedule {
  id: String!
  name: String
  message: String
  time: String
  end_time: String
  type: scheduleType
  days: String
  route: String
  bus: String
  driver: String
  actions: Iaction
}

type scheduleMutations {
  create(schedule: Ischedule!): schedule
  update(schedule: Uschedule!): schedule
  archive(schedule: Uschedule!): schedule
  restore(schedule: Uschedule!): schedule
}

# parent things
type parent {
  id: String
  national_id: String
  name: String
  phone: String
  email: String
  gender: gender
  students: [student]
  complaints: [complaint]
}

input Iparent {
  name: String
  national_id: String
  phone: String
  email: String
  school: String!
  password: String
  gender: gender
}

input Uparent {
  id: String!
  national_id: String
  name: String
  phone: String
  password: String
  email: String
  gender: gender
}

type parentMutations {
  create(parent: Iparent!): parent
  update(parent: Uparent!): parent
  archive(parent: Uparent!): parent
  restore(parent: Uparent!): parent
  invite(parent: Iinvite!): invitation
}

# teacher things
type teacher {
  id: String
  national_id: String
  name: String
  phone: String
  email: String
  gender: gender
  password: String
  classes: [class]
}

input Iteacher {
  name: String
  national_id: String
  phone: String
  email: String
  school: String!
  gender: gender
  password: String
}

input Uteacher {
  id: String!
  national_id: String
  name: String
  phone: String
  email: String
  gender: gender
  password: String
}

type teacherMutations {
  create(teacher: Iteacher!): teacher
  update(teacher: Uteacher!): teacher
  archive(teacher: Uteacher!): teacher
  restore(teacher: Uteacher!): teacher
}

input Isms {
  message: String!
  school: String!
  parents: [String!]!
}

type smsMutations {
  send(sms: Isms!): String
}

# grade things
type grade {
  id: String
  name: String
  school: school
  subjects: [subject]
}

input Igrade {
  name: String!
  school: String!
}

input Ugrade {
  id: String!
  name: String
  school: String
}

type gradeMutations {
  create(grade: Igrade!): grade
  update(grade: Ugrade!): grade
  archive(grade: Ugrade!): grade
  restore(grade: Ugrade!): grade
}

# subject things
type subject {
  id: String
  name: String
  grade: grade
  topics: [topic]
  topicOrder: [String]
}

input Isubject {
  name: String!
  grade: String!
  topicOrder: [String]
}

input Usubject {
  id: String!
  name: String
  grade: String
  topicOrder: [String]
}

type subjectMutations {
  create(subject: Isubject!): subject
  update(subject: Usubject!): subject
  archive(subject: Usubject!): subject
  restore(subject: Usubject!): subject
}

# topic things
type topic {
  id: String
  name: String
  subject: subject
  subtopics: [subtopic]
}

input Itopic {
  name: String!
  subject: String!
}

input Utopic {
  id: String!
  name: String
  subject: String
}

type topicMutations {
  create(topic: Itopic!): topic
  update(topic: Utopic!): topic
  archive(topic: Utopic!): topic
  restore(topic: Utopic!): topic
}

# subtopic things
type subtopic {
  id: String
  name: String
  topic: topic
  questions: [question]
}

input Isubtopic {
  name: String!
  topic: String!
}

input Usubtopic {
  id: String!
  name: String
  topic: String
}

type subtopicMutations {
  create(subtopic: Isubtopic!): subtopic
  update(subtopic: Usubtopic!): subtopic
  archive(subtopic: Usubtopic!): subtopic
  restore(subtopic: Usubtopic!): subtopic
}

enum answerType {
  SINGLECHOICE
  MULTICHOICE
  CAMERA
}

# question things
type question {
  id: String
  name: String
  type: answerType
  subtopic: subtopic
  videos: [String]
  attachments: [String]
  images: [String]
  answers: [answer]
  options: [option]
}

input Iquestion {
  name: String!
  type: String!
  subtopic: String!
  videos: [String]
  attachments: [String]
  images: [String]
  
}

input Uquestion {
  id: String!
  name: String
  type: answerType
  subtopic: String
  videos: [String]
  attachments: [String]
  images: [String]
}

type questionMutations {
  create(question: Iquestion!): question
  update(question: Uquestion!): question
  archive(question: Uquestion!): question
  restore(question: Uquestion!): question
}

# answer things
type answer {
  id: String
  value: String
  question: question
}

input Ianswer {
  value: String!
  question: String!
}

input Uanswer {
  id: String!
  value: String
  question: String
}

type answerMutations {
  create(answer: Ianswer!): answer
  update(answer: Uanswer!): answer
  archive(answer: Uanswer!): answer
  restore(answer: Uanswer!): answer
}

# option things
type option {
  id: String
  value: String
  correct: Boolean
  question: question
}

input Ioption {
  value: String!
  correct: Boolean!
  question: String!
}

input Uoption {
  id: String!
  value: String
  correct: Boolean
  question: String
}

type optionMutations {
  create(option: Ioption!): option
  update(option: Uoption!): option
  archive(option: Uoption!): option
  restore(option: Uoption!): option
}

# option things
type optionResponse {
  id: String
  value: String
  question: question
  videos: [String]
  attachments: [String]
}

input IoptionResponse {
  value: String!
  question: String!
  videos: [String]
  attachments: [String]
}

input UoptionResponse {
  id: String!
  value: String
  question: String
  videos: [String]
  attachments: [String]
}

type optionResponseMutations {
  create(option: IoptionResponse!): optionResponse
  update(option: UoptionResponse!): optionResponse
  archive(option: UoptionResponse!): optionResponse
  restore(option: UoptionResponse!): optionResponse
}

# term things
type term {
  id: String
  name: String
  school: school
}

input Iterm {
  name: String!
  school: String!
}

input Uterm {
  id: String!
  name: String
  school: String
}

type termMutations {
  create(term: Iterm!): term
  update(term: Uterm!): term
  archive(term: Uterm!): term
  restore(term: Uterm!): term
}

# team things
type team {
  id: String
  name: String
  school: school

  # relations
  members: [teacher]
}

input Iteam {
  name: String!
  school: String!
}

input Uteam {
  id: String!
  name: String
  school: String
}

type teamMutations {
  create(team: Iteam!): team
  update(team: Uteam!): team
  archive(team: Uteam!): team
  invite(team: Iinvite!): invitation
  restore(team: Uteam!): team
}

# team_member things
type team_member {
  id: String
  user: String
}

input IteamMember {
  team: String!
  user: String!
}

input UteamMember {
  id: String
  team: String!
  user: String!
}

type team_memberMutations {
  create(team_member: IteamMember!): team_member
  update(team_member: UteamMember!): team_member
  archive(team_member: UteamMember!): team_member
  restore(team_member: UteamMember!): team_member
}

# invitation things
type invitation {
  id: String
  school: String
  user: String
  message: String
  phone: String
  email: String
}

input Iinvitation {
  school: String!
  user: String!
  message: String!
  phone: String
  email: String
}

input Iinvite {
  user: String!
  school: String!
}

input Itransfer {
  driver: String!
  school: String!
}

input Uinvitation {
  id: String!
  school: String
  user: String
  message: String
  phone: String
  email: String
}

type invitationMutations {
  create(invitation: Iinvitation!): invitation
  update(invitation: Uinvitation!): invitation
  archive(invitation: Uinvitation!): invitation
  restore(invitation: Uinvitation!): invitation
}